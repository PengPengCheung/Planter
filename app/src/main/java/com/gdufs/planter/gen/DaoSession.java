package com.gdufs.planter.gen;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.gdufs.planter.module.attendance.model.AttendanceViewDBModel;
import com.gdufs.planter.module.attention.model.AttentionViewModel;
import com.gdufs.planter.module.planter.model.PlanterViewDBModel;
import com.gdufs.planter.module.planter.model.PlanterDetailViewDBModel;

import com.gdufs.planter.gen.AttendanceViewDBModelDao;
import com.gdufs.planter.gen.AttentionViewModelDao;
import com.gdufs.planter.gen.PlanterViewDBModelDao;
import com.gdufs.planter.gen.PlanterDetailViewDBModelDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig attendanceViewDBModelDaoConfig;
    private final DaoConfig attentionViewModelDaoConfig;
    private final DaoConfig planterViewDBModelDaoConfig;
    private final DaoConfig planterDetailViewDBModelDaoConfig;

    private final AttendanceViewDBModelDao attendanceViewDBModelDao;
    private final AttentionViewModelDao attentionViewModelDao;
    private final PlanterViewDBModelDao planterViewDBModelDao;
    private final PlanterDetailViewDBModelDao planterDetailViewDBModelDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        attendanceViewDBModelDaoConfig = daoConfigMap.get(AttendanceViewDBModelDao.class).clone();
        attendanceViewDBModelDaoConfig.initIdentityScope(type);

        attentionViewModelDaoConfig = daoConfigMap.get(AttentionViewModelDao.class).clone();
        attentionViewModelDaoConfig.initIdentityScope(type);

        planterViewDBModelDaoConfig = daoConfigMap.get(PlanterViewDBModelDao.class).clone();
        planterViewDBModelDaoConfig.initIdentityScope(type);

        planterDetailViewDBModelDaoConfig = daoConfigMap.get(PlanterDetailViewDBModelDao.class).clone();
        planterDetailViewDBModelDaoConfig.initIdentityScope(type);

        attendanceViewDBModelDao = new AttendanceViewDBModelDao(attendanceViewDBModelDaoConfig, this);
        attentionViewModelDao = new AttentionViewModelDao(attentionViewModelDaoConfig, this);
        planterViewDBModelDao = new PlanterViewDBModelDao(planterViewDBModelDaoConfig, this);
        planterDetailViewDBModelDao = new PlanterDetailViewDBModelDao(planterDetailViewDBModelDaoConfig, this);

        registerDao(AttendanceViewDBModel.class, attendanceViewDBModelDao);
        registerDao(AttentionViewModel.class, attentionViewModelDao);
        registerDao(PlanterViewDBModel.class, planterViewDBModelDao);
        registerDao(PlanterDetailViewDBModel.class, planterDetailViewDBModelDao);
    }
    
    public void clear() {
        attendanceViewDBModelDaoConfig.clearIdentityScope();
        attentionViewModelDaoConfig.clearIdentityScope();
        planterViewDBModelDaoConfig.clearIdentityScope();
        planterDetailViewDBModelDaoConfig.clearIdentityScope();
    }

    public AttendanceViewDBModelDao getAttendanceViewDBModelDao() {
        return attendanceViewDBModelDao;
    }

    public AttentionViewModelDao getAttentionViewModelDao() {
        return attentionViewModelDao;
    }

    public PlanterViewDBModelDao getPlanterViewDBModelDao() {
        return planterViewDBModelDao;
    }

    public PlanterDetailViewDBModelDao getPlanterDetailViewDBModelDao() {
        return planterDetailViewDBModelDao;
    }

}
