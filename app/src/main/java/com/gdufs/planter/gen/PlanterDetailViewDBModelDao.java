package com.gdufs.planter.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gdufs.planter.module.planter.model.PlanterDetailViewDBModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLANTER_DETAIL_VIEW_DBMODEL".
*/
public class PlanterDetailViewDBModelDao extends AbstractDao<PlanterDetailViewDBModel, Long> {

    public static final String TABLENAME = "PLANTER_DETAIL_VIEW_DBMODEL";

    /**
     * Properties of entity PlanterDetailViewDBModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MDataFrom = new Property(1, int.class, "mDataFrom", false, "M_DATA_FROM");
        public final static Property MCourseId = new Property(2, String.class, "mCourseId", false, "M_COURSE_ID");
        public final static Property MModuleId = new Property(3, int.class, "mModuleId", false, "M_MODULE_ID");
        public final static Property MActionId = new Property(4, int.class, "mActionId", false, "M_ACTION_ID");
        public final static Property MTeacherId = new Property(5, String.class, "mTeacherId", false, "M_TEACHER_ID");
        public final static Property MStudentId = new Property(6, String.class, "mStudentId", false, "M_STUDENT_ID");
        public final static Property MPlanterStatus = new Property(7, int.class, "mPlanterStatus", false, "M_PLANTER_STATUS");
        public final static Property MPlanterWaterUsed = new Property(8, int.class, "mPlanterWaterUsed", false, "M_PLANTER_WATER_USED");
        public final static Property MPlanterSunshineUsed = new Property(9, int.class, "mPlanterSunshineUsed", false, "M_PLANTER_SUNSHINE_USED");
        public final static Property MPlanterSoilUsed = new Property(10, int.class, "mPlanterSoilUsed", false, "M_PLANTER_SOIL_USED");
        public final static Property MPlanterRank = new Property(11, int.class, "mPlanterRank", false, "M_PLANTER_RANK");
        public final static Property MPlanterEvaluation = new Property(12, int.class, "mPlanterEvaluation", false, "M_PLANTER_EVALUATION");
        public final static Property MPlanterTitle = new Property(13, String.class, "mPlanterTitle", false, "M_PLANTER_TITLE");
    }


    public PlanterDetailViewDBModelDao(DaoConfig config) {
        super(config);
    }
    
    public PlanterDetailViewDBModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLANTER_DETAIL_VIEW_DBMODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_DATA_FROM\" INTEGER NOT NULL ," + // 1: mDataFrom
                "\"M_COURSE_ID\" TEXT," + // 2: mCourseId
                "\"M_MODULE_ID\" INTEGER NOT NULL ," + // 3: mModuleId
                "\"M_ACTION_ID\" INTEGER NOT NULL ," + // 4: mActionId
                "\"M_TEACHER_ID\" TEXT," + // 5: mTeacherId
                "\"M_STUDENT_ID\" TEXT," + // 6: mStudentId
                "\"M_PLANTER_STATUS\" INTEGER NOT NULL ," + // 7: mPlanterStatus
                "\"M_PLANTER_WATER_USED\" INTEGER NOT NULL ," + // 8: mPlanterWaterUsed
                "\"M_PLANTER_SUNSHINE_USED\" INTEGER NOT NULL ," + // 9: mPlanterSunshineUsed
                "\"M_PLANTER_SOIL_USED\" INTEGER NOT NULL ," + // 10: mPlanterSoilUsed
                "\"M_PLANTER_RANK\" INTEGER NOT NULL ," + // 11: mPlanterRank
                "\"M_PLANTER_EVALUATION\" INTEGER NOT NULL ," + // 12: mPlanterEvaluation
                "\"M_PLANTER_TITLE\" TEXT);"); // 13: mPlanterTitle
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLANTER_DETAIL_VIEW_DBMODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlanterDetailViewDBModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMDataFrom());
 
        String mCourseId = entity.getMCourseId();
        if (mCourseId != null) {
            stmt.bindString(3, mCourseId);
        }
        stmt.bindLong(4, entity.getMModuleId());
        stmt.bindLong(5, entity.getMActionId());
 
        String mTeacherId = entity.getMTeacherId();
        if (mTeacherId != null) {
            stmt.bindString(6, mTeacherId);
        }
 
        String mStudentId = entity.getMStudentId();
        if (mStudentId != null) {
            stmt.bindString(7, mStudentId);
        }
        stmt.bindLong(8, entity.getMPlanterStatus());
        stmt.bindLong(9, entity.getMPlanterWaterUsed());
        stmt.bindLong(10, entity.getMPlanterSunshineUsed());
        stmt.bindLong(11, entity.getMPlanterSoilUsed());
        stmt.bindLong(12, entity.getMPlanterRank());
        stmt.bindLong(13, entity.getMPlanterEvaluation());
 
        String mPlanterTitle = entity.getMPlanterTitle();
        if (mPlanterTitle != null) {
            stmt.bindString(14, mPlanterTitle);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlanterDetailViewDBModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMDataFrom());
 
        String mCourseId = entity.getMCourseId();
        if (mCourseId != null) {
            stmt.bindString(3, mCourseId);
        }
        stmt.bindLong(4, entity.getMModuleId());
        stmt.bindLong(5, entity.getMActionId());
 
        String mTeacherId = entity.getMTeacherId();
        if (mTeacherId != null) {
            stmt.bindString(6, mTeacherId);
        }
 
        String mStudentId = entity.getMStudentId();
        if (mStudentId != null) {
            stmt.bindString(7, mStudentId);
        }
        stmt.bindLong(8, entity.getMPlanterStatus());
        stmt.bindLong(9, entity.getMPlanterWaterUsed());
        stmt.bindLong(10, entity.getMPlanterSunshineUsed());
        stmt.bindLong(11, entity.getMPlanterSoilUsed());
        stmt.bindLong(12, entity.getMPlanterRank());
        stmt.bindLong(13, entity.getMPlanterEvaluation());
 
        String mPlanterTitle = entity.getMPlanterTitle();
        if (mPlanterTitle != null) {
            stmt.bindString(14, mPlanterTitle);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlanterDetailViewDBModel readEntity(Cursor cursor, int offset) {
        PlanterDetailViewDBModel entity = new PlanterDetailViewDBModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mDataFrom
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mCourseId
            cursor.getInt(offset + 3), // mModuleId
            cursor.getInt(offset + 4), // mActionId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mTeacherId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mStudentId
            cursor.getInt(offset + 7), // mPlanterStatus
            cursor.getInt(offset + 8), // mPlanterWaterUsed
            cursor.getInt(offset + 9), // mPlanterSunshineUsed
            cursor.getInt(offset + 10), // mPlanterSoilUsed
            cursor.getInt(offset + 11), // mPlanterRank
            cursor.getInt(offset + 12), // mPlanterEvaluation
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // mPlanterTitle
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlanterDetailViewDBModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMDataFrom(cursor.getInt(offset + 1));
        entity.setMCourseId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMModuleId(cursor.getInt(offset + 3));
        entity.setMActionId(cursor.getInt(offset + 4));
        entity.setMTeacherId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMStudentId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMPlanterStatus(cursor.getInt(offset + 7));
        entity.setMPlanterWaterUsed(cursor.getInt(offset + 8));
        entity.setMPlanterSunshineUsed(cursor.getInt(offset + 9));
        entity.setMPlanterSoilUsed(cursor.getInt(offset + 10));
        entity.setMPlanterRank(cursor.getInt(offset + 11));
        entity.setMPlanterEvaluation(cursor.getInt(offset + 12));
        entity.setMPlanterTitle(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlanterDetailViewDBModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlanterDetailViewDBModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlanterDetailViewDBModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
