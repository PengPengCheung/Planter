package com.gdufs.planter.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gdufs.planter.module.attendance.model.AttendanceViewDBModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENDANCE_VIEW_DBMODEL".
*/
public class AttendanceViewDBModelDao extends AbstractDao<AttendanceViewDBModel, Long> {

    public static final String TABLENAME = "ATTENDANCE_VIEW_DBMODEL";

    /**
     * Properties of entity AttendanceViewDBModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MDataFrom = new Property(1, int.class, "mDataFrom", false, "M_DATA_FROM");
        public final static Property MCourseId = new Property(2, String.class, "mCourseId", false, "M_COURSE_ID");
        public final static Property MModuleId = new Property(3, int.class, "mModuleId", false, "M_MODULE_ID");
        public final static Property MActionId = new Property(4, int.class, "mActionId", false, "M_ACTION_ID");
        public final static Property MTeacherId = new Property(5, String.class, "mTeacherId", false, "M_TEACHER_ID");
        public final static Property MStudentId = new Property(6, String.class, "mStudentId", false, "M_STUDENT_ID");
        public final static Property AttendanceId = new Property(7, String.class, "attendanceId", false, "ATTENDANCE_ID");
        public final static Property MAttendanceTime = new Property(8, String.class, "mAttendanceTime", false, "M_ATTENDANCE_TIME");
        public final static Property MAttendanceCount = new Property(9, int.class, "mAttendanceCount", false, "M_ATTENDANCE_COUNT");
        public final static Property MAbsenceCount = new Property(10, int.class, "mAbsenceCount", false, "M_ABSENCE_COUNT");
        public final static Property MAttendanceValidDuration = new Property(11, String.class, "mAttendanceValidDuration", false, "M_ATTENDANCE_VALID_DURATION");
        public final static Property MAttendanceBonusNum = new Property(12, int.class, "mAttendanceBonusNum", false, "M_ATTENDANCE_BONUS_NUM");
        public final static Property MAttendanceCode = new Property(13, String.class, "mAttendanceCode", false, "M_ATTENDANCE_CODE");
        public final static Property MAttendanceStatus = new Property(14, int.class, "mAttendanceStatus", false, "M_ATTENDANCE_STATUS");
        public final static Property MOpenClassId = new Property(15, String.class, "mOpenClassId", false, "M_OPEN_CLASS_ID");
    }


    public AttendanceViewDBModelDao(DaoConfig config) {
        super(config);
    }
    
    public AttendanceViewDBModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENDANCE_VIEW_DBMODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_DATA_FROM\" INTEGER NOT NULL ," + // 1: mDataFrom
                "\"M_COURSE_ID\" TEXT," + // 2: mCourseId
                "\"M_MODULE_ID\" INTEGER NOT NULL ," + // 3: mModuleId
                "\"M_ACTION_ID\" INTEGER NOT NULL ," + // 4: mActionId
                "\"M_TEACHER_ID\" TEXT," + // 5: mTeacherId
                "\"M_STUDENT_ID\" TEXT," + // 6: mStudentId
                "\"ATTENDANCE_ID\" TEXT," + // 7: attendanceId
                "\"M_ATTENDANCE_TIME\" TEXT," + // 8: mAttendanceTime
                "\"M_ATTENDANCE_COUNT\" INTEGER NOT NULL ," + // 9: mAttendanceCount
                "\"M_ABSENCE_COUNT\" INTEGER NOT NULL ," + // 10: mAbsenceCount
                "\"M_ATTENDANCE_VALID_DURATION\" TEXT," + // 11: mAttendanceValidDuration
                "\"M_ATTENDANCE_BONUS_NUM\" INTEGER NOT NULL ," + // 12: mAttendanceBonusNum
                "\"M_ATTENDANCE_CODE\" TEXT," + // 13: mAttendanceCode
                "\"M_ATTENDANCE_STATUS\" INTEGER NOT NULL ," + // 14: mAttendanceStatus
                "\"M_OPEN_CLASS_ID\" TEXT);"); // 15: mOpenClassId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENDANCE_VIEW_DBMODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AttendanceViewDBModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMDataFrom());
 
        String mCourseId = entity.getMCourseId();
        if (mCourseId != null) {
            stmt.bindString(3, mCourseId);
        }
        stmt.bindLong(4, entity.getMModuleId());
        stmt.bindLong(5, entity.getMActionId());
 
        String mTeacherId = entity.getMTeacherId();
        if (mTeacherId != null) {
            stmt.bindString(6, mTeacherId);
        }
 
        String mStudentId = entity.getMStudentId();
        if (mStudentId != null) {
            stmt.bindString(7, mStudentId);
        }
 
        String attendanceId = entity.getAttendanceId();
        if (attendanceId != null) {
            stmt.bindString(8, attendanceId);
        }
 
        String mAttendanceTime = entity.getMAttendanceTime();
        if (mAttendanceTime != null) {
            stmt.bindString(9, mAttendanceTime);
        }
        stmt.bindLong(10, entity.getMAttendanceCount());
        stmt.bindLong(11, entity.getMAbsenceCount());
 
        String mAttendanceValidDuration = entity.getMAttendanceValidDuration();
        if (mAttendanceValidDuration != null) {
            stmt.bindString(12, mAttendanceValidDuration);
        }
        stmt.bindLong(13, entity.getMAttendanceBonusNum());
 
        String mAttendanceCode = entity.getMAttendanceCode();
        if (mAttendanceCode != null) {
            stmt.bindString(14, mAttendanceCode);
        }
        stmt.bindLong(15, entity.getMAttendanceStatus());
 
        String mOpenClassId = entity.getMOpenClassId();
        if (mOpenClassId != null) {
            stmt.bindString(16, mOpenClassId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AttendanceViewDBModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMDataFrom());
 
        String mCourseId = entity.getMCourseId();
        if (mCourseId != null) {
            stmt.bindString(3, mCourseId);
        }
        stmt.bindLong(4, entity.getMModuleId());
        stmt.bindLong(5, entity.getMActionId());
 
        String mTeacherId = entity.getMTeacherId();
        if (mTeacherId != null) {
            stmt.bindString(6, mTeacherId);
        }
 
        String mStudentId = entity.getMStudentId();
        if (mStudentId != null) {
            stmt.bindString(7, mStudentId);
        }
 
        String attendanceId = entity.getAttendanceId();
        if (attendanceId != null) {
            stmt.bindString(8, attendanceId);
        }
 
        String mAttendanceTime = entity.getMAttendanceTime();
        if (mAttendanceTime != null) {
            stmt.bindString(9, mAttendanceTime);
        }
        stmt.bindLong(10, entity.getMAttendanceCount());
        stmt.bindLong(11, entity.getMAbsenceCount());
 
        String mAttendanceValidDuration = entity.getMAttendanceValidDuration();
        if (mAttendanceValidDuration != null) {
            stmt.bindString(12, mAttendanceValidDuration);
        }
        stmt.bindLong(13, entity.getMAttendanceBonusNum());
 
        String mAttendanceCode = entity.getMAttendanceCode();
        if (mAttendanceCode != null) {
            stmt.bindString(14, mAttendanceCode);
        }
        stmt.bindLong(15, entity.getMAttendanceStatus());
 
        String mOpenClassId = entity.getMOpenClassId();
        if (mOpenClassId != null) {
            stmt.bindString(16, mOpenClassId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AttendanceViewDBModel readEntity(Cursor cursor, int offset) {
        AttendanceViewDBModel entity = new AttendanceViewDBModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mDataFrom
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mCourseId
            cursor.getInt(offset + 3), // mModuleId
            cursor.getInt(offset + 4), // mActionId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mTeacherId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mStudentId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // attendanceId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mAttendanceTime
            cursor.getInt(offset + 9), // mAttendanceCount
            cursor.getInt(offset + 10), // mAbsenceCount
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mAttendanceValidDuration
            cursor.getInt(offset + 12), // mAttendanceBonusNum
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // mAttendanceCode
            cursor.getInt(offset + 14), // mAttendanceStatus
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // mOpenClassId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AttendanceViewDBModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMDataFrom(cursor.getInt(offset + 1));
        entity.setMCourseId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMModuleId(cursor.getInt(offset + 3));
        entity.setMActionId(cursor.getInt(offset + 4));
        entity.setMTeacherId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMStudentId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAttendanceId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMAttendanceTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMAttendanceCount(cursor.getInt(offset + 9));
        entity.setMAbsenceCount(cursor.getInt(offset + 10));
        entity.setMAttendanceValidDuration(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMAttendanceBonusNum(cursor.getInt(offset + 12));
        entity.setMAttendanceCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMAttendanceStatus(cursor.getInt(offset + 14));
        entity.setMOpenClassId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AttendanceViewDBModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AttendanceViewDBModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AttendanceViewDBModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
