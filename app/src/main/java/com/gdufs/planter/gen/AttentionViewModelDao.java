package com.gdufs.planter.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gdufs.planter.module.attention.model.AttentionViewModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTENTION_VIEW_MODEL".
*/
public class AttentionViewModelDao extends AbstractDao<AttentionViewModel, Long> {

    public static final String TABLENAME = "ATTENTION_VIEW_MODEL";

    /**
     * Properties of entity AttentionViewModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MAttentionId = new Property(1, String.class, "mAttentionId", false, "M_ATTENTION_ID");
        public final static Property MAttentionTime = new Property(2, String.class, "mAttentionTime", false, "M_ATTENTION_TIME");
        public final static Property MAttentionDuration = new Property(3, String.class, "mAttentionDuration", false, "M_ATTENTION_DURATION");
        public final static Property MAttentionFocusCount = new Property(4, int.class, "mAttentionFocusCount", false, "M_ATTENTION_FOCUS_COUNT");
        public final static Property MAttentionLostFocusCount = new Property(5, int.class, "mAttentionLostFocusCount", false, "M_ATTENTION_LOST_FOCUS_COUNT");
        public final static Property MAttentionBonusNum = new Property(6, int.class, "mAttentionBonusNum", false, "M_ATTENTION_BONUS_NUM");
        public final static Property MAttentionStatus = new Property(7, int.class, "mAttentionStatus", false, "M_ATTENTION_STATUS");
    }


    public AttentionViewModelDao(DaoConfig config) {
        super(config);
    }
    
    public AttentionViewModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTENTION_VIEW_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_ATTENTION_ID\" TEXT," + // 1: mAttentionId
                "\"M_ATTENTION_TIME\" TEXT," + // 2: mAttentionTime
                "\"M_ATTENTION_DURATION\" TEXT," + // 3: mAttentionDuration
                "\"M_ATTENTION_FOCUS_COUNT\" INTEGER NOT NULL ," + // 4: mAttentionFocusCount
                "\"M_ATTENTION_LOST_FOCUS_COUNT\" INTEGER NOT NULL ," + // 5: mAttentionLostFocusCount
                "\"M_ATTENTION_BONUS_NUM\" INTEGER NOT NULL ," + // 6: mAttentionBonusNum
                "\"M_ATTENTION_STATUS\" INTEGER NOT NULL );"); // 7: mAttentionStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTENTION_VIEW_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AttentionViewModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mAttentionId = entity.getMAttentionId();
        if (mAttentionId != null) {
            stmt.bindString(2, mAttentionId);
        }
 
        String mAttentionTime = entity.getMAttentionTime();
        if (mAttentionTime != null) {
            stmt.bindString(3, mAttentionTime);
        }
 
        String mAttentionDuration = entity.getMAttentionDuration();
        if (mAttentionDuration != null) {
            stmt.bindString(4, mAttentionDuration);
        }
        stmt.bindLong(5, entity.getMAttentionFocusCount());
        stmt.bindLong(6, entity.getMAttentionLostFocusCount());
        stmt.bindLong(7, entity.getMAttentionBonusNum());
        stmt.bindLong(8, entity.getMAttentionStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AttentionViewModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mAttentionId = entity.getMAttentionId();
        if (mAttentionId != null) {
            stmt.bindString(2, mAttentionId);
        }
 
        String mAttentionTime = entity.getMAttentionTime();
        if (mAttentionTime != null) {
            stmt.bindString(3, mAttentionTime);
        }
 
        String mAttentionDuration = entity.getMAttentionDuration();
        if (mAttentionDuration != null) {
            stmt.bindString(4, mAttentionDuration);
        }
        stmt.bindLong(5, entity.getMAttentionFocusCount());
        stmt.bindLong(6, entity.getMAttentionLostFocusCount());
        stmt.bindLong(7, entity.getMAttentionBonusNum());
        stmt.bindLong(8, entity.getMAttentionStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AttentionViewModel readEntity(Cursor cursor, int offset) {
        AttentionViewModel entity = new AttentionViewModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mAttentionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mAttentionTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mAttentionDuration
            cursor.getInt(offset + 4), // mAttentionFocusCount
            cursor.getInt(offset + 5), // mAttentionLostFocusCount
            cursor.getInt(offset + 6), // mAttentionBonusNum
            cursor.getInt(offset + 7) // mAttentionStatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AttentionViewModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMAttentionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMAttentionTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMAttentionDuration(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMAttentionFocusCount(cursor.getInt(offset + 4));
        entity.setMAttentionLostFocusCount(cursor.getInt(offset + 5));
        entity.setMAttentionBonusNum(cursor.getInt(offset + 6));
        entity.setMAttentionStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AttentionViewModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AttentionViewModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AttentionViewModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
