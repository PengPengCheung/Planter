package com.gdufs.planter.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gdufs.planter.module.group.model.GroupPushModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_PUSH_MODEL".
*/
public class GroupPushModelDao extends AbstractDao<GroupPushModel, Long> {

    public static final String TABLENAME = "GROUP_PUSH_MODEL";

    /**
     * Properties of entity GroupPushModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MTeacherGroupOpenId = new Property(1, String.class, "mTeacherGroupOpenId", false, "M_TEACHER_GROUP_OPEN_ID");
        public final static Property MPushType = new Property(2, int.class, "mPushType", false, "M_PUSH_TYPE");
        public final static Property MCourseId = new Property(3, String.class, "mCourseId", false, "M_COURSE_ID");
        public final static Property MModuleId = new Property(4, int.class, "mModuleId", false, "M_MODULE_ID");
        public final static Property MGroupOpenTime = new Property(5, String.class, "mGroupOpenTime", false, "M_GROUP_OPEN_TIME");
        public final static Property MGroupLimit = new Property(6, String.class, "mGroupLimit", false, "M_GROUP_LIMIT");
    }


    public GroupPushModelDao(DaoConfig config) {
        super(config);
    }
    
    public GroupPushModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_PUSH_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_TEACHER_GROUP_OPEN_ID\" TEXT," + // 1: mTeacherGroupOpenId
                "\"M_PUSH_TYPE\" INTEGER NOT NULL ," + // 2: mPushType
                "\"M_COURSE_ID\" TEXT," + // 3: mCourseId
                "\"M_MODULE_ID\" INTEGER NOT NULL ," + // 4: mModuleId
                "\"M_GROUP_OPEN_TIME\" TEXT," + // 5: mGroupOpenTime
                "\"M_GROUP_LIMIT\" TEXT);"); // 6: mGroupLimit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_PUSH_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupPushModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mTeacherGroupOpenId = entity.getMTeacherGroupOpenId();
        if (mTeacherGroupOpenId != null) {
            stmt.bindString(2, mTeacherGroupOpenId);
        }
        stmt.bindLong(3, entity.getMPushType());
 
        String mCourseId = entity.getMCourseId();
        if (mCourseId != null) {
            stmt.bindString(4, mCourseId);
        }
        stmt.bindLong(5, entity.getMModuleId());
 
        String mGroupOpenTime = entity.getMGroupOpenTime();
        if (mGroupOpenTime != null) {
            stmt.bindString(6, mGroupOpenTime);
        }
 
        String mGroupLimit = entity.getMGroupLimit();
        if (mGroupLimit != null) {
            stmt.bindString(7, mGroupLimit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupPushModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mTeacherGroupOpenId = entity.getMTeacherGroupOpenId();
        if (mTeacherGroupOpenId != null) {
            stmt.bindString(2, mTeacherGroupOpenId);
        }
        stmt.bindLong(3, entity.getMPushType());
 
        String mCourseId = entity.getMCourseId();
        if (mCourseId != null) {
            stmt.bindString(4, mCourseId);
        }
        stmt.bindLong(5, entity.getMModuleId());
 
        String mGroupOpenTime = entity.getMGroupOpenTime();
        if (mGroupOpenTime != null) {
            stmt.bindString(6, mGroupOpenTime);
        }
 
        String mGroupLimit = entity.getMGroupLimit();
        if (mGroupLimit != null) {
            stmt.bindString(7, mGroupLimit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupPushModel readEntity(Cursor cursor, int offset) {
        GroupPushModel entity = new GroupPushModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mTeacherGroupOpenId
            cursor.getInt(offset + 2), // mPushType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mCourseId
            cursor.getInt(offset + 4), // mModuleId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mGroupOpenTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // mGroupLimit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupPushModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMTeacherGroupOpenId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMPushType(cursor.getInt(offset + 2));
        entity.setMCourseId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMModuleId(cursor.getInt(offset + 4));
        entity.setMGroupOpenTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMGroupLimit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupPushModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupPushModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupPushModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
